#version 330 core

in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
           
uniform samplerCube shadowMapSampler;
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;

uniform int useTexture;
uniform mat4 V;
uniform float far_plane;
uniform vec3 viewPos;
uniform int room;

// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;

// materials
struct Material {
    vec4 Ka; 
    vec4 Kd;
    vec4 Ks;
    float Ns; 
};
uniform Material mtl;

out vec4 fragmentColor;

void phong(float visibility);
float ShadowCalculation();

// array of offset direction for sampling
vec3 gridSamplingDisk[20] = {

   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
};


void main() {   
    
    // Task 4.3
    float shadow  = ShadowCalculation();
    // 1 -> shadow
    // 0 -> not_shadow

    float visibility = 1.0f - shadow;
    phong(visibility);
    //fragmentColor = vec4(shadow);
}


float ShadowCalculation()
{   /*
    // get vector between fragment position and light position
    vec3 fragToLight = vertex_position_worldspace - light.lightPosition_worldspace;
    // use the fragment to light vector to sample from the depth map    
    float closestDepth = texture(shadowMapSampler , fragToLight).r;
    // it is currently in linear range between [0,1], let's re-transform it back to original depth value
    closestDepth *= far_plane;
    // now get current linear depth as the length between the fragment and light position
    float currentDepth = length(fragToLight);
    // test for shadows
    float bias = 25.00; // we use a much larger bias since depth is now in [near_plane, far_plane] range
    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;
    return shadow;
    */
    
    //PCF
    vec3 fragToLight = vertex_position_worldspace - light.lightPosition_worldspace;
    float currentDepth = length(fragToLight);

    float shadow = 0.0;
    float bias = 25.00;
    int samples = 20;
    float viewDistance = length(viewPos - vertex_position_worldspace);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(shadowMapSampler, fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= far_plane;   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
    return shadow;
    
}


void phong(float visibility) {
   
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;

    // use texture for materials
    if (useTexture == 1) {
        _Ks = vec4(texture(specularColorSampler, vertex_UV).rgb, 1.0);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 10;
    }
    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * vec4(light.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    float distance;
    //model the light distance effect
    if(room==0){
        distance = 12.0 + length(light.lightPosition_worldspace - vertex_position_worldspace) / 200 ;
    }
    else{
        distance = 18.0;
    }
    float distance_sq = distance * distance;

    // final fragment color
    fragmentColor = vec4(
        Ia + 
        visibility * Id * light.power / distance_sq +   // Task 4.3 Use visibility
        visibility * Is * light.power / distance_sq);
}